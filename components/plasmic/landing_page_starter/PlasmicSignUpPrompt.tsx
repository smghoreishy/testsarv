// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qLp2o69PMLTDkVR2ydizGB
// Component: mtnHms1PU24L

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: LI4MGYb9rz-K/component
import Divider from "../../Divider"; // plasmic-import: qkqoeeDOoDQG/component
import TextInput from "../../TextInput"; // plasmic-import: 125Bsk5icPhZ/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: IXIjervUnr/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: qLp2o69PMLTDkVR2ydizGB/projectcss
import sty from "./PlasmicSignUpPrompt.module.css"; // plasmic-import: mtnHms1PU24L/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: XISzVTs2qwGn/icon
import GoogleIcon from "./icons/PlasmicIcon__Google"; // plasmic-import: uNnr7RniB0iP/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: BX3kIbFmbGRE/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: lEVmJjc4zP-l/icon
import WandIcon from "./icons/PlasmicIcon__Wand"; // plasmic-import: WCxixvqKF0QW/icon

createPlasmicElementProxy;

export type PlasmicSignUpPrompt__VariantMembers = {};
export type PlasmicSignUpPrompt__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignUpPrompt__VariantsArgs;
export const PlasmicSignUpPrompt__VariantProps = new Array<VariantPropType>();

export type PlasmicSignUpPrompt__ArgsType = {};
type ArgPropType = keyof PlasmicSignUpPrompt__ArgsType;
export const PlasmicSignUpPrompt__ArgProps = new Array<ArgPropType>();

export type PlasmicSignUpPrompt__OverridesType = {
  root?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  phone?: p.Flex<typeof TextInput>;
  answer?: p.Flex<typeof TextInput>;
};

export interface DefaultSignUpPromptProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignUpPrompt__RenderFunc(props: {
  variants: PlasmicSignUpPrompt__VariantsArgs;
  args: PlasmicSignUpPrompt__ArgsType;
  overrides: PlasmicSignUpPrompt__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "phone.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "answer.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__dHwg4)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__shbMq)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zef6X
            )}
          >
            {"Sign up with"}
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gNi5I)}
          >
            <Button
              className={classNames("__wab_instance", sty.button___4DFx)}
              outline={true}
              showStartIcon={true}
              submitsForm={true}
            >
              {"Apple"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button___51IO)}
              outline={true}
              showStartIcon={true}
              startIcon={
                <GoogleIcon
                  className={classNames(projectcss.all, sty.svg__aEgYn)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              {"Google"}
            </Button>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ffgGq)}
          >
            <Divider
              className={classNames("__wab_instance", sty.divider__boxN)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ot6Km
              )}
            >
              {"Or"}
            </div>
            <Divider
              className={classNames("__wab_instance", sty.divider__l8On4)}
            />
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jFq1R)}
          >
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["textInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Full Name"}
              value={
                p.generateStateValueProp($state, ["textInput", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"phone"}
              data-plasmic-override={overrides.phone}
              className={classNames("__wab_instance", sty.phone)}
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["phone", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"phone"}
              value={p.generateStateValueProp($state, ["phone", "value"]) ?? ""}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__an0Jj
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.answer.value;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <TextInput
              data-plasmic-name={"answer"}
              data-plasmic-override={overrides.answer}
              className={classNames("__wab_instance", sty.answer)}
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["answer", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              value={
                p.generateStateValueProp($state, ["answer", "value"]) ?? ""
              }
            />
          </p.Stack>
          <Button
            className={classNames("__wab_instance", sty.button__p06Rl)}
            color={"indigo"}
            endIcon={
              <WandIcon
                className={classNames(projectcss.all, sty.svg__etk0O)}
                role={"img"}
              />
            }
            onClick={async event => {
              const $steps = {};
              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "customFunction",
                          interactionUuid: "ANMFWSBVo",
                          componentUuid: "mtnHms1PU24L",
                          argName: "customFunction"
                        },
                        () => async () => {
                          return (() => {
                            const axios = require("axios");
                            const webhookUrl =
                              "https://n8n.bot.inbeet.tech/webhook/d9e65266-6f16-461f-a88c-fcd592f06296";
                            const queryParams = {
                              phone_number: $state.phone.value
                            };
                            return axios
                              .get(webhookUrl, { params: queryParams })
                              .then(response => {
                                $state.answer.value = String(response.data);
                                console.log(
                                  "Updated value of $state.answer.value:",
                                  $state.answer.value
                                );
                              })
                              .catch(error => {
                                console.error("Error calling webhook:", error);
                              });
                          })();
                        }
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "customFunction",
                        interactionUuid: "ANMFWSBVo",
                        componentUuid: "mtnHms1PU24L"
                      },
                      () =>
                        (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "customFunction",
                    interactionUuid: "ANMFWSBVo",
                    componentUuid: "mtnHms1PU24L"
                  },
                  $steps["runCode"]
                );
              }
              $steps["updateAnswerValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "BZnVrxm-1",
                          componentUuid: "mtnHms1PU24L",
                          argName: "variable"
                        },
                        () => ({
                          objRoot: $state,
                          variablePath: ["answer", "value"]
                        })
                      ),
                      operation: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "BZnVrxm-1",
                          componentUuid: "mtnHms1PU24L",
                          argName: "operation"
                        },
                        () => 0
                      ),
                      value: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "BZnVrxm-1",
                          componentUuid: "mtnHms1PU24L",
                          argName: "value"
                        },
                        () => $state.answer.value
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "BZnVrxm-1",
                        componentUuid: "mtnHms1PU24L"
                      },
                      () =>
                        (({ variable, value, startIndex, deleteCount }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          p.set(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["updateAnswerValue"] === "object" &&
                typeof $steps["updateAnswerValue"].then === "function"
              ) {
                $steps["updateAnswerValue"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "BZnVrxm-1",
                    componentUuid: "mtnHms1PU24L"
                  },
                  $steps["updateAnswerValue"]
                );
              }
            }}
            submitsForm={true}
          >
            {"Start your account"}
          </Button>
        </p.Stack>
        <Divider className={classNames("__wab_instance", sty.divider__g6QqR)} />

        <div className={classNames(projectcss.all, sty.freeBox__hFBj2)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__epiZ
            )}
          >
            {
              "A cras sagittis odio vestibulum pulvinar a eget hendrerit id vestibulum a leo sociosqu dictumst dictumst natoque magnis parturient."
            }
          </div>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nH2R
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textInput", "phone", "answer"],
  textInput: ["textInput"],
  phone: ["phone"],
  answer: ["answer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput: typeof TextInput;
  phone: typeof TextInput;
  answer: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignUpPrompt__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignUpPrompt__VariantsArgs;
    args?: PlasmicSignUpPrompt__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignUpPrompt__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignUpPrompt__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignUpPrompt__ArgProps,
          internalVariantPropNames: PlasmicSignUpPrompt__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignUpPrompt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpPrompt";
  } else {
    func.displayName = `PlasmicSignUpPrompt.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUpPrompt = Object.assign(
  // Top-level PlasmicSignUpPrompt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    phone: makeNodeComponent("phone"),
    answer: makeNodeComponent("answer"),

    // Metadata about props expected for PlasmicSignUpPrompt
    internalVariantProps: PlasmicSignUpPrompt__VariantProps,
    internalArgProps: PlasmicSignUpPrompt__ArgProps
  }
);

export default PlasmicSignUpPrompt;
/* prettier-ignore-end */
