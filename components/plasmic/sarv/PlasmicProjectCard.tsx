// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aUZyoBv2znBVirsF7auAUJ
// Component: z8gKJTdyaC-H

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SarvButton from "../../SarvButton"; // plasmic-import: oskxfFF4bAz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_landing_page_starter_css from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qLp2o69PMLTDkVR2ydizGB/projectcss
import projectcss from "./plasmic_sarv.module.css"; // plasmic-import: aUZyoBv2znBVirsF7auAUJ/projectcss
import sty from "./PlasmicProjectCard.module.css"; // plasmic-import: z8gKJTdyaC-H/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: XJpVQNdzD6f/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: sQ0yZCF2eby/icon

createPlasmicElementProxy;

export type PlasmicProjectCard__VariantMembers = {};
export type PlasmicProjectCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicProjectCard__VariantsArgs;
export const PlasmicProjectCard__VariantProps = new Array<VariantPropType>();

export type PlasmicProjectCard__ArgsType = {
  thumbnail?: string;
  onThumbnailChange?: (val: string) => void;
  title?: string;
  onTitleChange?: (val: string) => void;
  investmnetType?: string;
  onInvestmnetTypeChange?: (val: string) => void;
  locationName?: string;
  onLocationNameChange?: (val: string) => void;
  builder?: string;
  onBuilderChange?: (val: string) => void;
  startDuration?: string;
  onStartDurationChange?: (val: string) => void;
  endDuration?: string;
  onEndDurationChange?: (val: string) => void;
  profitPercent?: string;
  onProfitPercentChange?: (val: string) => void;
  minMoney?: number;
  onMinMoneyChange?: (val: string) => void;
  projectId?: string;
  onProjectIdChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicProjectCard__ArgsType;
export const PlasmicProjectCard__ArgProps = new Array<ArgPropType>(
  "thumbnail",
  "onThumbnailChange",
  "title",
  "onTitleChange",
  "investmnetType",
  "onInvestmnetTypeChange",
  "locationName",
  "onLocationNameChange",
  "builder",
  "onBuilderChange",
  "startDuration",
  "onStartDurationChange",
  "endDuration",
  "onEndDurationChange",
  "profitPercent",
  "onProfitPercentChange",
  "minMoney",
  "onMinMoneyChange",
  "projectId",
  "onProjectIdChange"
);

export type PlasmicProjectCard__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  sarvButton?: p.Flex<typeof SarvButton>;
};

export interface DefaultProjectCardProps {
  thumbnail?: string;
  onThumbnailChange?: (val: string) => void;
  title?: string;
  onTitleChange?: (val: string) => void;
  investmnetType?: string;
  onInvestmnetTypeChange?: (val: string) => void;
  locationName?: string;
  onLocationNameChange?: (val: string) => void;
  builder?: string;
  onBuilderChange?: (val: string) => void;
  startDuration?: string;
  onStartDurationChange?: (val: string) => void;
  endDuration?: string;
  onEndDurationChange?: (val: string) => void;
  profitPercent?: string;
  onProfitPercentChange?: (val: string) => void;
  minMoney?: number;
  onMinMoneyChange?: (val: string) => void;
  projectId?: string;
  onProjectIdChange?: (val: string) => void;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProjectCard__RenderFunc(props: {
  variants: PlasmicProjectCard__VariantsArgs;
  args: PlasmicProjectCard__ArgsType;
  overrides: PlasmicProjectCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "thumbnail",
        type: "writable",
        variableType: "text",

        valueProp: "thumbnail",
        onChangeProp: "onThumbnailChange"
      },
      {
        path: "title",
        type: "writable",
        variableType: "text",

        valueProp: "title",
        onChangeProp: "onTitleChange"
      },
      {
        path: "investmnetType",
        type: "writable",
        variableType: "text",

        valueProp: "investmnetType",
        onChangeProp: "onInvestmnetTypeChange"
      },
      {
        path: "locationName",
        type: "writable",
        variableType: "text",

        valueProp: "locationName",
        onChangeProp: "onLocationNameChange"
      },
      {
        path: "builder",
        type: "writable",
        variableType: "text",

        valueProp: "builder",
        onChangeProp: "onBuilderChange"
      },
      {
        path: "startDuration",
        type: "writable",
        variableType: "text",

        valueProp: "startDuration",
        onChangeProp: "onStartDurationChange"
      },
      {
        path: "endDuration",
        type: "writable",
        variableType: "text",

        valueProp: "endDuration",
        onChangeProp: "onEndDurationChange"
      },
      {
        path: "profitPercent",
        type: "writable",
        variableType: "text",

        valueProp: "profitPercent",
        onChangeProp: "onProfitPercentChange"
      },
      {
        path: "minMoney",
        type: "writable",
        variableType: "number",

        valueProp: "minMoney",
        onChangeProp: "onMinMoneyChange"
      },
      {
        path: "sarvButton.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "projectId",
        type: "writable",
        variableType: "text",

        valueProp: "projectId",
        onChangeProp: "onProjectIdChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_landing_page_starter_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"27vh"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"27vw"}
        loading={"lazy"}
        src={(() => {
          try {
            return $state.thumbnail;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dmnBz)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__fx3Xu)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sDePs
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lOdE
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.investmnetType;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kybBj
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.locationName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__edQ2G
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return "سازنده: " + $state.builder;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fofCm)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__faJgG)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fT1Cn
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      let toPersisanNumber = n => {
                        const farsiDigits = [
                          "۰",
                          "۱",
                          "۲",
                          "۳",
                          "۴",
                          "۵",
                          "۶",
                          "۷",
                          "۸",
                          "۹"
                        ];

                        return n.toString().replace(/\d/g, x => farsiDigits[x]);
                      };
                      let englishNumber = $state.startDuration;
                      return toPersisanNumber(englishNumber) + " ماه از شروع ";
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tkqrb
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      let toPersisanNumber = n => {
                        const farsiDigits = [
                          "۰",
                          "۱",
                          "۲",
                          "۳",
                          "۴",
                          "۵",
                          "۶",
                          "۷",
                          "۸",
                          "۹"
                        ];

                        return n.toString().replace(/\d/g, x => farsiDigits[x]);
                      };
                      let englishNumber = $state.endDuration;
                      return toPersisanNumber(englishNumber) + " ماه تا پایان ";
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__d16L)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__trKjJ
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      let __plasmic_ret = undefined;
                      let start = Number($state.startDuration);
                      let toEnd = Number($state.endDuration);
                      let nowPercent = (a, b) => {
                        return (a / (a + b)) * 57;
                      };
                      let i = nowPercent(start, toEnd);
                      let text = "";
                      for (let j = 0; j <= i; j++) {
                        __plasmic_ret = text += "-";
                      }
                      return __plasmic_ret;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "       ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </p.Stack>
        <div className={classNames(projectcss.all, sty.freeBox__iHnDm)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__liXcO
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return "سود پروژه";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0633\u0648\u062f \u062a\u0627 \u0627\u0645\u0631\u0648\u0632";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jdqv6
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    let toPersisanNumber = n => {
                      const farsiDigits = [
                        "۰",
                        "۱",
                        "۲",
                        "۳",
                        "۴",
                        "۵",
                        "۶",
                        "۷",
                        "۸",
                        "۹"
                      ];

                      return n.toString().replace(/\d/g, x => farsiDigits[x]);
                    };
                    let englishNumber = $state.profitPercent;
                    return toPersisanNumber(englishNumber);
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___78S)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6S9T2
            )}
          >
            {
              "\u0634\u0631\u0648\u0639 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u0627\u0632"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__meFbc
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    let toPersisanNumber = n => {
                      const farsiDigits = [
                        "۰",
                        "۱",
                        "۲",
                        "۳",
                        "۴",
                        "۵",
                        "۶",
                        "۷",
                        "۸",
                        "۹"
                      ];

                      return n.toString().replace(/\d/g, x => farsiDigits[x]);
                    };
                    let englishNumber = $state.minMoney;
                    return toPersisanNumber(englishNumber) + " تومان";
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <SarvButton
          data-plasmic-name={"sarvButton"}
          data-plasmic-override={overrides.sarvButton}
          className={classNames("__wab_instance", sty.sarvButton)}
          onClick={async event => {
            const $steps = {};
            $steps["goToProjectPage"] = true
              ? (() => {
                  const actionArgs = {
                    destination: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "navigation",
                        interactionUuid: "5JoW0b_sc263",
                        componentUuid: "z8gKJTdyaC-H",
                        argName: "destination"
                      },
                      () =>
                        `/project-page/${(() => {
                          try {
                            return $state.projectId;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}`
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "5JoW0b_sc263",
                      componentUuid: "z8gKJTdyaC-H"
                    },
                    () =>
                      (({ destination }) => {
                        __nextRouter?.push(destination);
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["goToProjectPage"] === "object" &&
              typeof $steps["goToProjectPage"].then === "function"
            ) {
              $steps["goToProjectPage"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "navigation",
                  interactionUuid: "5JoW0b_sc263",
                  componentUuid: "z8gKJTdyaC-H"
                },
                $steps["goToProjectPage"]
              );
            }
          }}
          onSelectedChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ["sarvButton", "selected"])(
              eventArgs[0]
            );
          }}
          selected={p.generateStateValueProp($state, [
            "sarvButton",
            "selected"
          ])}
        >
          {
            "\u0634\u0631\u0648\u0639 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc"
          }
        </SarvButton>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "sarvButton"],
  img: ["img"],
  sarvButton: ["sarvButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  sarvButton: typeof SarvButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProjectCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProjectCard__VariantsArgs;
    args?: PlasmicProjectCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProjectCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProjectCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProjectCard__ArgProps,
          internalVariantPropNames: PlasmicProjectCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProjectCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectCard";
  } else {
    func.displayName = `PlasmicProjectCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectCard = Object.assign(
  // Top-level PlasmicProjectCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    sarvButton: makeNodeComponent("sarvButton"),

    // Metadata about props expected for PlasmicProjectCard
    internalVariantProps: PlasmicProjectCard__VariantProps,
    internalArgProps: PlasmicProjectCard__ArgProps
  }
);

export default PlasmicProjectCard;
/* prettier-ignore-end */
