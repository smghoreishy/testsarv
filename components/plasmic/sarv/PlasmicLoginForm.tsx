// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aUZyoBv2znBVirsF7auAUJ
// Component: MZ_khWtvGq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import SarvButton from "../../SarvButton"; // plasmic-import: oskxfFF4bAz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_landing_page_starter_css from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qLp2o69PMLTDkVR2ydizGB/projectcss
import projectcss from "./plasmic_sarv.module.css"; // plasmic-import: aUZyoBv2znBVirsF7auAUJ/projectcss
import sty from "./PlasmicLoginForm.module.css"; // plasmic-import: MZ_khWtvGq/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: XJpVQNdzD6f/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: sQ0yZCF2eby/icon

createPlasmicElementProxy;

export type PlasmicLoginForm__VariantMembers = {
  empty: "empty";
  phoneStandardCheck: "phoneStandardCheck";
  signupStepTwo: "signupStepTwo";
  loginStepTwo: "loginStepTwo";
  signupStepTwoError: "signupStepTwoError";
  loginStepTwoError: "loginStepTwoError";
};
export type PlasmicLoginForm__VariantsArgs = {
  empty?: SingleBooleanChoiceArg<"empty">;
  phoneStandardCheck?: SingleBooleanChoiceArg<"phoneStandardCheck">;
  signupStepTwo?: SingleBooleanChoiceArg<"signupStepTwo">;
  loginStepTwo?: SingleBooleanChoiceArg<"loginStepTwo">;
  signupStepTwoError?: SingleBooleanChoiceArg<"signupStepTwoError">;
  loginStepTwoError?: SingleBooleanChoiceArg<"loginStepTwoError">;
};
type VariantPropType = keyof PlasmicLoginForm__VariantsArgs;
export const PlasmicLoginForm__VariantProps = new Array<VariantPropType>(
  "empty",
  "phoneStandardCheck",
  "signupStepTwo",
  "loginStepTwo",
  "signupStepTwoError",
  "loginStepTwoError"
);

export type PlasmicLoginForm__ArgsType = {
  onEmptyChange?: (val: any) => void;
  apiAnswer?: string;
  onApiAnswerChange?: (val: string) => void;
  onSignupStepTwoChange?: (val: any) => void;
  tokenAnswer?: string;
  onTokenAnswerChange?: (val: string) => void;
  onSignupStepTwoVarChange?: (val: string) => void;
  onLoginStepTwoVarChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicLoginForm__ArgsType;
export const PlasmicLoginForm__ArgProps = new Array<ArgPropType>(
  "onEmptyChange",
  "apiAnswer",
  "onApiAnswerChange",
  "onSignupStepTwoChange",
  "tokenAnswer",
  "onTokenAnswerChange",
  "onSignupStepTwoVarChange",
  "onLoginStepTwoVarChange"
);

export type PlasmicLoginForm__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  signupStepTwo2?: p.Flex<"div">;
  phone?: p.Flex<typeof AntdInput>;
  token?: p.Flex<typeof AntdInput>;
  freeBox?: p.Flex<"div">;
  timerText?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
  timerCount?: p.Flex<"div">;
  timerClick?: p.Flex<"div">;
  stepOneButton?: p.Flex<typeof SarvButton>;
  signupTokenCheck?: p.Flex<typeof SarvButton>;
};

export interface DefaultLoginFormProps {
  onEmptyChange?: (val: any) => void;
  apiAnswer?: string;
  onApiAnswerChange?: (val: string) => void;
  onSignupStepTwoChange?: (val: any) => void;
  tokenAnswer?: string;
  onTokenAnswerChange?: (val: string) => void;
  onSignupStepTwoVarChange?: (val: string) => void;
  onLoginStepTwoVarChange?: (val: string) => void;
  empty?: SingleBooleanChoiceArg<"empty">;
  phoneStandardCheck?: SingleBooleanChoiceArg<"phoneStandardCheck">;
  signupStepTwo?: SingleBooleanChoiceArg<"signupStepTwo">;
  loginStepTwo?: SingleBooleanChoiceArg<"loginStepTwo">;
  signupStepTwoError?: SingleBooleanChoiceArg<"signupStepTwoError">;
  loginStepTwoError?: SingleBooleanChoiceArg<"loginStepTwoError">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginForm__RenderFunc(props: {
  variants: PlasmicLoginForm__VariantsArgs;
  args: PlasmicLoginForm__ArgsType;
  overrides: PlasmicLoginForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "phone.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "phoneStandardCheck", "phoneStandardCheck")
            ? ``
            : ``,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "empty",
        type: "writable",
        variableType: "variant",

        valueProp: "empty",
        onChangeProp: "onEmptyChange"
      },
      {
        path: "apiAnswer",
        type: "writable",
        variableType: "text",

        valueProp: "apiAnswer",
        onChangeProp: "onApiAnswerChange"
      },
      {
        path: "phoneStandardCheck",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.phoneStandardCheck
      },
      {
        path: "signupStepTwo",
        type: "writable",
        variableType: "variant",

        valueProp: "signupStepTwo",
        onChangeProp: "onSignupStepTwoChange"
      },
      {
        path: "token.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "phoneNumber",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "loginStepTwo",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loginStepTwo
      },
      {
        path: "tokenAnswer",
        type: "writable",
        variableType: "text",

        valueProp: "tokenAnswer",
        onChangeProp: "onTokenAnswerChange"
      },
      {
        path: "signupStepTwoVar",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onChangeProp: "onSignupStepTwoVarChange"
      },
      {
        path: "loginStepTwoVar",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loginStepTwo;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })(),

        onChangeProp: "onLoginStepTwoVarChange"
      },
      {
        path: "signupStepTwoError",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.signupStepTwoError
      },
      {
        path: "loginStepTwoError",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.loginStepTwoError
      },
      {
        path: "stepOneButton.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "signupTokenCheck.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_landing_page_starter_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootempty]: hasVariant($state, "empty", "empty"),
          [sty.rootloginStepTwoError]: hasVariant(
            $state,
            "loginStepTwoError",
            "loginStepTwoError"
          ),
          [sty.rootloginStepTwoError_signupStepTwoError]:
            hasVariant($state, "signupStepTwoError", "signupStepTwoError") &&
            hasVariant($state, "loginStepTwoError", "loginStepTwoError"),
          [sty.rootloginStepTwoError_signupStepTwo]:
            hasVariant($state, "signupStepTwo", "signupStepTwo") &&
            hasVariant($state, "loginStepTwoError", "loginStepTwoError"),
          [sty.rootloginStepTwo]: hasVariant(
            $state,
            "loginStepTwo",
            "loginStepTwo"
          ),
          [sty.rootphoneStandardCheck]: hasVariant(
            $state,
            "phoneStandardCheck",
            "phoneStandardCheck"
          ),
          [sty.rootsignupStepTwoError]: hasVariant(
            $state,
            "signupStepTwoError",
            "signupStepTwoError"
          ),
          [sty.rootsignupStepTwoError_loginStepTwo]:
            hasVariant($state, "signupStepTwoError", "signupStepTwoError") &&
            hasVariant($state, "loginStepTwo", "loginStepTwo"),
          [sty.rootsignupStepTwo]: hasVariant(
            $state,
            "signupStepTwo",
            "signupStepTwo"
          ),
          [sty.rootsignupStepTwo_loginStepTwo]:
            hasVariant($state, "signupStepTwo", "signupStepTwo") &&
            hasVariant($state, "loginStepTwo", "loginStepTwo")
        }
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"70px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"auto"}
        loading={"lazy"}
        src={{
          src: "/plasmic/sarv/images/_300625A3A5Ad406A94197Bd0Fb1B2C47Png.png",
          fullWidth: 200,
          fullHeight: 200,
          aspectRatio: undefined
        }}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__pYe3K,
          {
            [sty.textloginStepTwoError__pYe3KMsNr]: hasVariant(
              $state,
              "loginStepTwoError",
              "loginStepTwoError"
            ),
            [sty.textloginStepTwo__pYe3Kr12Cv]: hasVariant(
              $state,
              "loginStepTwo",
              "loginStepTwo"
            ),
            [sty.textsignupStepTwoError__pYe3KXh86P]: hasVariant(
              $state,
              "signupStepTwoError",
              "signupStepTwoError"
            ),
            [sty.textsignupStepTwo__pYe3KOOjDc]: hasVariant(
              $state,
              "signupStepTwo",
              "signupStepTwo"
            )
          }
        )}
      >
        {hasVariant($state, "signupStepTwoError", "signupStepTwoError")
          ? "\u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
          : hasVariant($state, "signupStepTwo", "signupStepTwo")
          ? "\u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
          : "\u0648\u0631\u0648\u062f | \u062b\u0628\u062a \u0646\u0627\u0645"}
      </div>
      {(
        hasVariant($state, "loginStepTwoError", "loginStepTwoError")
          ? true
          : hasVariant($state, "loginStepTwo", "loginStepTwo")
          ? true
          : false
      ) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wFjp,
            {
              [sty.textloginStepTwoError__wFjpMsNr]: hasVariant(
                $state,
                "loginStepTwoError",
                "loginStepTwoError"
              ),
              [sty.textloginStepTwo__wFjpr12Cv]: hasVariant(
                $state,
                "loginStepTwo",
                "loginStepTwo"
              ),
              [sty.textsignupStepTwoError__wFjpXh86P]: hasVariant(
                $state,
                "signupStepTwoError",
                "signupStepTwoError"
              ),
              [sty.textsignupStepTwo__wFjpOOjDc]: hasVariant(
                $state,
                "signupStepTwo",
                "signupStepTwo"
              )
            }
          )}
        >
          {hasVariant($state, "signupStepTwoError", "signupStepTwoError")
            ? "\u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
            : hasVariant($state, "signupStepTwo", "signupStepTwo")
            ? "\u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
            : "\u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"}
        </div>
      ) : null}
      <div
        data-plasmic-name={"signupStepTwo2"}
        data-plasmic-override={overrides.signupStepTwo2}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.signupStepTwo2,
          {
            [sty.signupStepTwo2loginStepTwoError]: hasVariant(
              $state,
              "loginStepTwoError",
              "loginStepTwoError"
            ),
            [sty.signupStepTwo2loginStepTwo]: hasVariant(
              $state,
              "loginStepTwo",
              "loginStepTwo"
            ),
            [sty.signupStepTwo2signupStepTwoError]: hasVariant(
              $state,
              "signupStepTwoError",
              "signupStepTwoError"
            ),
            [sty.signupStepTwo2signupStepTwo]: hasVariant(
              $state,
              "signupStepTwo",
              "signupStepTwo"
            )
          }
        )}
      >
        {hasVariant($state, "signupStepTwoError", "signupStepTwoError") ? (
          <React.Fragment>
            {(() => {
              try {
                return (
                  " حساب کاربری با شماره موبایل " +
                  $state.phoneNumber +
                  " وجود ندارد. برای ساخت حساب جدید، کد تایید برای این شماره ارسال گردید"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 ---- \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f. \u0628\u0631\u0627\u06cc \u0633\u0627\u062e\u062a \u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f\u060c \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647 \u0627\u0631\u0633\u0627\u0644 \u06af\u0631\u062f\u06cc\u062f.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : hasVariant($state, "signupStepTwo", "signupStepTwo") ? (
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return (
                    " حساب کاربری با شماره موبایل " +
                    $state.phoneNumber +
                    " وجود ندارد. برای ساخت حساب جدید، کد تایید برای این شماره ارسال گردید"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 ---- \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f. \u0628\u0631\u0627\u06cc \u0633\u0627\u062e\u062a \u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f\u060c \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647 \u0627\u0631\u0633\u0627\u0644 \u06af\u0631\u062f\u06cc\u062f.";
                  }
                  throw e;
                }
              })()
            }}
          />
        ) : (
          "\u0633\u0644\u0627\u0645!\n\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
        )}
      </div>
      {(
        hasVariant($state, "loginStepTwoError", "loginStepTwoError")
          ? true
          : hasVariant($state, "loginStepTwo", "loginStepTwo")
          ? true
          : false
      ) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pvU8,
            {
              [sty.textloginStepTwoError__pvU8MsNr]: hasVariant(
                $state,
                "loginStepTwoError",
                "loginStepTwoError"
              ),
              [sty.textloginStepTwo__pvU8R12Cv]: hasVariant(
                $state,
                "loginStepTwo",
                "loginStepTwo"
              ),
              [sty.textsignupStepTwoError__pvU8Xh86P]: hasVariant(
                $state,
                "signupStepTwoError",
                "signupStepTwoError"
              ),
              [sty.textsignupStepTwo__pvU8OOjDc]: hasVariant(
                $state,
                "signupStepTwo",
                "signupStepTwo"
              )
            }
          )}
        >
          {hasVariant($state, "signupStepTwoError", "signupStepTwoError") ? (
            <React.Fragment>
              {(() => {
                try {
                  return (
                    " حساب کاربری با شماره موبایل " +
                    $state.phoneNumber +
                    " وجود ندارد. برای ساخت حساب جدید، کد تایید برای این شماره ارسال گردید"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 ---- \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f. \u0628\u0631\u0627\u06cc \u0633\u0627\u062e\u062a \u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f\u060c \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647 \u0627\u0631\u0633\u0627\u0644 \u06af\u0631\u062f\u06cc\u062f.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : hasVariant($state, "signupStepTwo", "signupStepTwo") ? (
            <React.Fragment>
              {(() => {
                try {
                  return (
                    " حساب کاربری با شماره موبایل " +
                    $state.phoneNumber +
                    " وجود ندارد. برای ساخت حساب جدید، کد تایید برای این شماره ارسال گردید"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 ---- \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f. \u0628\u0631\u0627\u06cc \u0633\u0627\u062e\u062a \u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f\u060c \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647 \u0627\u0631\u0633\u0627\u0644 \u06af\u0631\u062f\u06cc\u062f.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return (
                    " کد تایید برای شماره موبایل " +
                    $state.phoneNumber +
                    " ارسال گردید"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0633\u0644\u0627\u0645!\n\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </div>
      ) : null}
      {(() => {
        const child$Props = {
          allowClear: hasVariant($state, "empty", "empty") ? false : undefined,
          bordered: hasVariant($state, "empty", "empty") ? true : true,
          className: classNames("__wab_instance", sty.phone, {
            [sty.phoneempty]: hasVariant($state, "empty", "empty"),
            [sty.phoneloginStepTwoError]: hasVariant(
              $state,
              "loginStepTwoError",
              "loginStepTwoError"
            ),
            [sty.phoneloginStepTwo]: hasVariant(
              $state,
              "loginStepTwo",
              "loginStepTwo"
            ),
            [sty.phonephoneStandardCheck]: hasVariant(
              $state,
              "phoneStandardCheck",
              "phoneStandardCheck"
            ),
            [sty.phonesignupStepTwoError]: hasVariant(
              $state,
              "signupStepTwoError",
              "signupStepTwoError"
            ),
            [sty.phonesignupStepTwo]: hasVariant(
              $state,
              "signupStepTwo",
              "signupStepTwo"
            )
          }),
          onChange: p.generateStateOnChangePropForCodeComponents(
            $state,
            "value",
            ["phone", "value"],
            AntdInput_Helpers
          ),
          type: "text",
          value: p.generateStateValueProp($state, ["phone", "value"])
        };
        p.initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "phone.value"
            }
          ],
          [],
          AntdInput_Helpers ?? {},
          child$Props
        );

        return (
          <AntdInput
            data-plasmic-name={"phone"}
            data-plasmic-override={overrides.phone}
            {...child$Props}
          />
        );
      })()}
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.token, {
            [sty.tokenloginStepTwoError]: hasVariant(
              $state,
              "loginStepTwoError",
              "loginStepTwoError"
            ),
            [sty.tokenloginStepTwo]: hasVariant(
              $state,
              "loginStepTwo",
              "loginStepTwo"
            ),
            [sty.tokensignupStepTwoError]: hasVariant(
              $state,
              "signupStepTwoError",
              "signupStepTwoError"
            ),
            [sty.tokensignupStepTwo]: hasVariant(
              $state,
              "signupStepTwo",
              "signupStepTwo"
            )
          }),
          onChange: p.generateStateOnChangePropForCodeComponents(
            $state,
            "value",
            ["token", "value"],
            AntdInput_Helpers
          ),
          value: p.generateStateValueProp($state, ["token", "value"])
        };
        p.initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "token.value"
            }
          ],
          [],
          AntdInput_Helpers ?? {},
          child$Props
        );

        return (
          <AntdInput
            data-plasmic-name={"token"}
            data-plasmic-override={overrides.token}
            {...child$Props}
          />
        );
      })()}
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__zH9V,
          {
            [sty.textloginStepTwoError__zH9VmsNr]: hasVariant(
              $state,
              "loginStepTwoError",
              "loginStepTwoError"
            ),
            [sty.textsignupStepTwoError__zH9Vxh86P]: hasVariant(
              $state,
              "signupStepTwoError",
              "signupStepTwoError"
            )
          }
        )}
      >
        {
          "\u06a9\u062f \u0631\u0627 \u0628\u0647 \u0627\u0634\u062a\u0628\u0627\u0647 \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0647 \u0627\u06cc\u062f. \u0645\u062c\u062f\u062f\u0627 \u0627\u0645\u062a\u062d\u0627\u0646 \u06a9\u0646\u06cc\u062f"
        }
      </div>
      {(
        hasVariant($state, "loginStepTwoError", "loginStepTwoError")
          ? true
          : hasVariant($state, "signupStepTwoError", "signupStepTwoError")
          ? true
          : hasVariant($state, "loginStepTwo", "loginStepTwo")
          ? true
          : hasVariant($state, "signupStepTwo", "signupStepTwo")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxloginStepTwoError]: hasVariant(
              $state,
              "loginStepTwoError",
              "loginStepTwoError"
            ),
            [sty.freeBoxloginStepTwo]: hasVariant(
              $state,
              "loginStepTwo",
              "loginStepTwo"
            ),
            [sty.freeBoxsignupStepTwoError]: hasVariant(
              $state,
              "signupStepTwoError",
              "signupStepTwoError"
            ),
            [sty.freeBoxsignupStepTwo]: hasVariant(
              $state,
              "signupStepTwo",
              "signupStepTwo"
            )
          })}
        >
          <div
            data-plasmic-name={"timerText"}
            data-plasmic-override={overrides.timerText}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.timerText
            )}
            id={"timerText"}
          >
            {"Enter some text"}
          </div>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<div>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Countdown Timer Example</title>\n</head>\n<body>\n\n\n<script>\n// Set the countdown duration in seconds (2 minutes = 120 seconds)\nconst countdownDuration = 5;\nlet timerText = document.getElementById('timerText')\nlet againCode = document.getElementById('timerClick')\nlet timerElement = document.getElementById('timerCount');\ntimerText.textContent = '\u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f' \ntimerElement.textContent = '02:00'\nagainCode.textContent = ''\n\n\nfunction updateTimerDisplay(seconds) {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  timerElement.textContent = formattedTime;\n}\n\nfunction startCountdown(duration) {\n  let seconds = duration;\n\n  const countdownInterval = setInterval(() => {\n    updateTimerDisplay(seconds);\n\n    if (seconds === 0) {\n      clearInterval(countdownInterval);\n      timerElement.textContent = '';\n      againCode.textContent ='\u0628\u0631\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f';\n      timerText.textContent = '';\n      againCode.addEventListener(\"click\", function() {\n        timerText.textContent = '\u0645\u0627\u0646\u062f\u0647 \u062a\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f' \n        timerElement.textContent = '02:00'\n        againCode.textContent = ''\n        startCountdown(countdownDuration);\n      });\n    } else {\n      seconds--;\n    }\n  }, 1000); // Update every 1 second (1000 milliseconds)\n}\nstartCountdown(countdownDuration);\n\n\n\n</script>\n\n</body>\n</html>\n\n</div>"
            }
          />

          <div
            data-plasmic-name={"timerCount"}
            data-plasmic-override={overrides.timerCount}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.timerCount
            )}
            id={"timerCount"}
          >
            {"Enter some text"}
          </div>
          <div
            data-plasmic-name={"timerClick"}
            data-plasmic-override={overrides.timerClick}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.timerClick,
              {
                [sty.timerClicksignupStepTwoError]: hasVariant(
                  $state,
                  "signupStepTwoError",
                  "signupStepTwoError"
                ),
                [sty.timerClicksignupStepTwo]: hasVariant(
                  $state,
                  "signupStepTwo",
                  "signupStepTwo"
                )
              }
            )}
            id={"timerClick"}
            onClick={async event => {
              const $steps = {};
              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "customFunction",
                          interactionUuid: "Kwqrc0XQSz",
                          componentUuid: "MZ_khWtvGq",
                          argName: "customFunction"
                        },
                        () => async () => {
                          return (() => {
                            const axios = require("axios");
                            const webhookUrl =
                              "https://n8n.bot.inbeet.tech/webhook/a493a794-6fa5-46db-b683-0ad61f449261";
                            const queryParams = {
                              phone_number: $state.phone.value
                            };
                            return axios.get(webhookUrl, {
                              params: queryParams
                            });
                          })();
                        }
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "customFunction",
                        interactionUuid: "Kwqrc0XQSz",
                        componentUuid: "MZ_khWtvGq"
                      },
                      () =>
                        (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "customFunction",
                    interactionUuid: "Kwqrc0XQSz",
                    componentUuid: "MZ_khWtvGq"
                  },
                  $steps["runCode"]
                );
              }
            }}
          >
            {"Enter some text"}
          </div>
        </p.Stack>
      ) : null}
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___6PVaW,
          {
            [sty.textempty___6PVaWhO5Nx]: hasVariant($state, "empty", "empty"),
            [sty.textphoneStandardCheck___6PVaWp8QvV]: hasVariant(
              $state,
              "phoneStandardCheck",
              "phoneStandardCheck"
            ),
            [sty.textsignupStepTwoError___6PVaWxh86P]: hasVariant(
              $state,
              "signupStepTwoError",
              "signupStepTwoError"
            ),
            [sty.textsignupStepTwoError_empty___6PVaWxh86PHO5Nx]:
              hasVariant($state, "signupStepTwoError", "signupStepTwoError") &&
              hasVariant($state, "empty", "empty"),
            [sty.textsignupStepTwoError_phoneStandardCheck___6PVaWxh86PP8QvV]:
              hasVariant($state, "phoneStandardCheck", "phoneStandardCheck") &&
              hasVariant($state, "signupStepTwoError", "signupStepTwoError"),
            [sty.textsignupStepTwo___6PVaWoOjDc]: hasVariant(
              $state,
              "signupStepTwo",
              "signupStepTwo"
            ),
            [sty.textsignupStepTwo_empty___6PVaWoOjDcHO5Nx]:
              hasVariant($state, "signupStepTwo", "signupStepTwo") &&
              hasVariant($state, "empty", "empty"),
            [sty.textsignupStepTwo_phoneStandardCheck___6PVaWoOjDcP8QvV]:
              hasVariant($state, "phoneStandardCheck", "phoneStandardCheck") &&
              hasVariant($state, "signupStepTwo", "signupStepTwo")
          }
        )}
        id={"2"}
      >
        {hasVariant($state, "phoneStandardCheck", "phoneStandardCheck")
          ? "\u0644\u0637\u0641\u0627 \u0627\u06cc\u0646 \u0642\u0633\u0645\u062a \u0631\u0627 \u062e\u0627\u0644\u06cc \u0646\u06af\u0630\u0627\u0631\u06cc\u062f"
          : "\u0644\u0637\u0641\u0627 \u0627\u06cc\u0646 \u0642\u0633\u0645\u062a \u0631\u0627 \u062e\u0627\u0644\u06cc \u0646\u06af\u0630\u0627\u0631\u06cc\u062f"}
      </div>
      {(
        hasVariant($state, "signupStepTwoError", "signupStepTwoError")
          ? true
          : hasVariant($state, "signupStepTwo", "signupStepTwo")
          ? true
          : hasVariant($state, "phoneStandardCheck", "phoneStandardCheck")
          ? true
          : hasVariant($state, "empty", "empty")
          ? true
          : false
      ) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__g6UA,
            {
              [sty.textempty__g6UAhO5Nx]: hasVariant($state, "empty", "empty"),
              [sty.textempty_phoneStandardCheck__g6UAhO5NxP8QvV]:
                hasVariant($state, "empty", "empty") &&
                hasVariant($state, "phoneStandardCheck", "phoneStandardCheck"),
              [sty.textphoneStandardCheck__g6UAp8QvV]: hasVariant(
                $state,
                "phoneStandardCheck",
                "phoneStandardCheck"
              ),
              [sty.textsignupStepTwoError__g6UAXh86P]: hasVariant(
                $state,
                "signupStepTwoError",
                "signupStepTwoError"
              ),
              [sty.textsignupStepTwoError_empty__g6UAXh86PHO5Nx]:
                hasVariant(
                  $state,
                  "signupStepTwoError",
                  "signupStepTwoError"
                ) && hasVariant($state, "empty", "empty"),
              [sty.textsignupStepTwoError_phoneStandardCheck__g6UAXh86PP8QvV]:
                hasVariant(
                  $state,
                  "phoneStandardCheck",
                  "phoneStandardCheck"
                ) &&
                hasVariant($state, "signupStepTwoError", "signupStepTwoError"),
              [sty.textsignupStepTwo__g6UAOOjDc]: hasVariant(
                $state,
                "signupStepTwo",
                "signupStepTwo"
              ),
              [sty.textsignupStepTwo_empty__g6UAOOjDcHO5Nx]:
                hasVariant($state, "signupStepTwo", "signupStepTwo") &&
                hasVariant($state, "empty", "empty"),
              [sty.textsignupStepTwo_phoneStandardCheck__g6UAOOjDcP8QvV]:
                hasVariant(
                  $state,
                  "phoneStandardCheck",
                  "phoneStandardCheck"
                ) && hasVariant($state, "signupStepTwo", "signupStepTwo")
            }
          )}
          id={"2"}
        >
          {hasVariant($state, "phoneStandardCheck", "phoneStandardCheck")
            ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0631\u0627 \u0646\u0627\u062f\u0631\u0633\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0647 \u0627\u06cc\u062f"
            : hasVariant($state, "empty", "empty")
            ? "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0631\u0627 \u0646\u0627\u062f\u0631\u0633\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0647 \u0627\u06cc\u062f"
            : "\u0644\u0637\u0641\u0627 \u0627\u06cc\u0646 \u0642\u0633\u0645\u062a \u0631\u0627 \u062e\u0627\u0644\u06cc \u0646\u06af\u0630\u0627\u0631\u06cc\u062f"}
        </div>
      ) : null}
      <SarvButton
        data-plasmic-name={"stepOneButton"}
        data-plasmic-override={overrides.stepOneButton}
        className={classNames("__wab_instance", sty.stepOneButton, {
          [sty.stepOneButtonempty]: hasVariant($state, "empty", "empty"),
          [sty.stepOneButtonloginStepTwoError]: hasVariant(
            $state,
            "loginStepTwoError",
            "loginStepTwoError"
          ),
          [sty.stepOneButtonloginStepTwo]: hasVariant(
            $state,
            "loginStepTwo",
            "loginStepTwo"
          ),
          [sty.stepOneButtonphoneStandardCheck]: hasVariant(
            $state,
            "phoneStandardCheck",
            "phoneStandardCheck"
          ),
          [sty.stepOneButtonsignupStepTwoError]: hasVariant(
            $state,
            "signupStepTwoError",
            "signupStepTwoError"
          ),
          [sty.stepOneButtonsignupStepTwo]: hasVariant(
            $state,
            "signupStepTwo",
            "signupStepTwo"
          )
        })}
        onClick={async event => {
          const $steps = {};
          $steps["updateEmpty"] =
            $state.phone.value === undefined || $state.phone.value === ""
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "8pzIUGY64",
                        componentUuid: "MZ_khWtvGq",
                        argName: "vgroup"
                      },
                      () => "empty"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "8pzIUGY64",
                        componentUuid: "MZ_khWtvGq",
                        argName: "operation"
                      },
                      () => 4
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "8pzIUGY64",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        p.set($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["updateEmpty"] === "object" &&
            typeof $steps["updateEmpty"].then === "function"
          ) {
            $steps["updateEmpty"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "8pzIUGY64",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updateEmpty"]
            );
          }
          $steps["updatePhoneStandardCheck"] =
            $state.phone.value !== undefined &&
            $state.phone.value[0] &&
            $state.phone.value[1] !== "09" &&
            $state.phone.value.length !== 11
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "PcVOggsAW",
                        componentUuid: "MZ_khWtvGq",
                        argName: "vgroup"
                      },
                      () => "phoneStandardCheck"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "PcVOggsAW",
                        componentUuid: "MZ_khWtvGq",
                        argName: "operation"
                      },
                      () => 4
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "PcVOggsAW",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        p.set($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["updatePhoneStandardCheck"] === "object" &&
            typeof $steps["updatePhoneStandardCheck"].then === "function"
          ) {
            $steps["updatePhoneStandardCheck"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "PcVOggsAW",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updatePhoneStandardCheck"]
            );
          }
          $steps["updatePhoneValue"] = true
            ? (() => {
                const actionArgs = {
                  variable: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariable",
                      interactionUuid: "zbYqXL2IP",
                      componentUuid: "MZ_khWtvGq",
                      argName: "variable"
                    },
                    () => ({
                      objRoot: $state,
                      variablePath: ["phone", "value"]
                    })
                  ),
                  operation: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariable",
                      interactionUuid: "zbYqXL2IP",
                      componentUuid: "MZ_khWtvGq",
                      argName: "operation"
                    },
                    () => 0
                  ),
                  value: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariable",
                      interactionUuid: "zbYqXL2IP",
                      componentUuid: "MZ_khWtvGq",
                      argName: "value"
                    },
                    () => $state.phone.value
                  )
                };
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "zbYqXL2IP",
                    componentUuid: "MZ_khWtvGq"
                  },
                  () =>
                    (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      p.set(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["updatePhoneValue"] === "object" &&
            typeof $steps["updatePhoneValue"].then === "function"
          ) {
            $steps["updatePhoneValue"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariable",
                interactionUuid: "zbYqXL2IP",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updatePhoneValue"]
            );
          }
          $steps["updateEmpty"] =
            $state.phone.value !== undefined
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "5JsLtpRgE",
                        componentUuid: "MZ_khWtvGq",
                        argName: "vgroup"
                      },
                      () => "empty"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "5JsLtpRgE",
                        componentUuid: "MZ_khWtvGq",
                        argName: "operation"
                      },
                      () => 6
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "5JsLtpRgE",
                        componentUuid: "MZ_khWtvGq",
                        argName: "value"
                      },
                      () => "empty"
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "5JsLtpRgE",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        p.set($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["updateEmpty"] === "object" &&
            typeof $steps["updateEmpty"].then === "function"
          ) {
            $steps["updateEmpty"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "5JsLtpRgE",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updateEmpty"]
            );
          }
          $steps["updatePhoneStandardCheck"] =
            $state.phone.value[0] + $state.phone.value[1] === "09" &&
            $state.phone.value.length === 11
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "9iuV4iTj1",
                        componentUuid: "MZ_khWtvGq",
                        argName: "vgroup"
                      },
                      () => "phoneStandardCheck"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "9iuV4iTj1",
                        componentUuid: "MZ_khWtvGq",
                        argName: "operation"
                      },
                      () => 6
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "9iuV4iTj1",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        p.set($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["updatePhoneStandardCheck"] === "object" &&
            typeof $steps["updatePhoneStandardCheck"].then === "function"
          ) {
            $steps["updatePhoneStandardCheck"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "9iuV4iTj1",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updatePhoneStandardCheck"]
            );
          }
          $steps["runCode"] =
            $state.phone.value !== undefined &&
            $state.phone.value[0] + $state.phone.value[1] === "09" &&
            $state.phone.value.length === 11
              ? (() => {
                  const actionArgs = {
                    customFunction: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "customFunction",
                        interactionUuid: "r9yp8uL6s",
                        componentUuid: "MZ_khWtvGq",
                        argName: "customFunction"
                      },
                      () => async () => {
                        return (() => {
                          const axios = require("axios");
                          const webhookUrl =
                            "https://n8n.bot.inbeet.tech/webhook/d9e65266-6f16-461f-a88c-fcd592f06296";
                          const queryParams = {
                            phone_number: $state.phone.value
                          };
                          return axios
                            .get(webhookUrl, { params: queryParams })
                            .then(response => {
                              console.log(
                                "Updated value of $state.answer.value:",
                                $state.apiAnswer
                              );
                              $state.apiAnswer = String(response.data);
                            })
                            .catch(error => {
                              console.error("Error calling webhook:", error);
                            });
                        })();
                      }
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "customFunction",
                      interactionUuid: "r9yp8uL6s",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "customFunction",
                interactionUuid: "r9yp8uL6s",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["runCode"]
            );
          }
          $steps["updatePhoneNumber"] = true
            ? (() => {
                const actionArgs = {
                  variable: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariable",
                      interactionUuid: "A4bPgp_Em",
                      componentUuid: "MZ_khWtvGq",
                      argName: "variable"
                    },
                    () => ({
                      objRoot: $state,
                      variablePath: ["phoneNumber"]
                    })
                  ),
                  operation: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariable",
                      interactionUuid: "A4bPgp_Em",
                      componentUuid: "MZ_khWtvGq",
                      argName: "operation"
                    },
                    () => 0
                  ),
                  value: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariable",
                      interactionUuid: "A4bPgp_Em",
                      componentUuid: "MZ_khWtvGq",
                      argName: "value"
                    },
                    () => $state.phone.value
                  )
                };
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "A4bPgp_Em",
                    componentUuid: "MZ_khWtvGq"
                  },
                  () =>
                    (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      p.set(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["updatePhoneNumber"] === "object" &&
            typeof $steps["updatePhoneNumber"].then === "function"
          ) {
            $steps["updatePhoneNumber"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariable",
                interactionUuid: "A4bPgp_Em",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updatePhoneNumber"]
            );
          }
          $steps["updateLoginStepTwo"] =
            $state.apiAnswer === "yes" &&
            $state.phone.value !== undefined &&
            $state.phone.value[0] + $state.phone.value[1] === "09" &&
            $state.phone.value.length === 11
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "yE2zjM0Qp",
                        componentUuid: "MZ_khWtvGq",
                        argName: "vgroup"
                      },
                      () => "loginStepTwo"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "yE2zjM0Qp",
                        componentUuid: "MZ_khWtvGq",
                        argName: "operation"
                      },
                      () => 4
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "yE2zjM0Qp",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        p.set($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["updateLoginStepTwo"] === "object" &&
            typeof $steps["updateLoginStepTwo"].then === "function"
          ) {
            $steps["updateLoginStepTwo"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "yE2zjM0Qp",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updateLoginStepTwo"]
            );
          }
          $steps["updateSignupStepTwo"] =
            $state.apiAnswer === "no" &&
            $state.phone.value !== undefined &&
            $state.phone.value[0] + $state.phone.value[1] === "09" &&
            $state.phone.value.length === 11
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "YD-jtIpZv",
                        componentUuid: "MZ_khWtvGq",
                        argName: "vgroup"
                      },
                      () => "signupStepTwo"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "YD-jtIpZv",
                        componentUuid: "MZ_khWtvGq",
                        argName: "operation"
                      },
                      () => 4
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "YD-jtIpZv",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        p.set($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["updateSignupStepTwo"] === "object" &&
            typeof $steps["updateSignupStepTwo"].then === "function"
          ) {
            $steps["updateSignupStepTwo"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "YD-jtIpZv",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updateSignupStepTwo"]
            );
          }
        }}
        onSelectedChange={(...eventArgs) => {
          p.generateStateOnChangeProp($state, ["stepOneButton", "selected"])(
            eventArgs[0]
          );
        }}
        selected={p.generateStateValueProp($state, [
          "stepOneButton",
          "selected"
        ])}
      >
        {"\u0648\u0631\u0648\u062f"}
      </SarvButton>
      <SarvButton
        data-plasmic-name={"signupTokenCheck"}
        data-plasmic-override={overrides.signupTokenCheck}
        className={classNames("__wab_instance", sty.signupTokenCheck, {
          [sty.signupTokenCheckempty]: hasVariant($state, "empty", "empty"),
          [sty.signupTokenCheckloginStepTwoError]: hasVariant(
            $state,
            "loginStepTwoError",
            "loginStepTwoError"
          ),
          [sty.signupTokenCheckloginStepTwo]: hasVariant(
            $state,
            "loginStepTwo",
            "loginStepTwo"
          ),
          [sty.signupTokenCheckphoneStandardCheck]: hasVariant(
            $state,
            "phoneStandardCheck",
            "phoneStandardCheck"
          ),
          [sty.signupTokenChecksignupStepTwoError]: hasVariant(
            $state,
            "signupStepTwoError",
            "signupStepTwoError"
          ),
          [sty.signupTokenChecksignupStepTwo]: hasVariant(
            $state,
            "signupStepTwo",
            "signupStepTwo"
          )
        })}
        onClick={async event => {
          const $steps = {};
          $steps["runCode"] =
            $state.phone.value !== undefined &&
            $state.phone.value[0] + $state.phone.value[1] === "09" &&
            $state.phone.value.length === 11
              ? (() => {
                  const actionArgs = {
                    customFunction: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "customFunction",
                        interactionUuid: "hsLMau7ESxI",
                        componentUuid: "MZ_khWtvGq",
                        argName: "customFunction"
                      },
                      () => async () => {
                        return (() => {
                          const axios = require("axios");
                          const webhookUrl =
                            "https://n8n.bot.inbeet.tech/webhook/b1a9272f-7c1e-4b28-9678-307a75506851";
                          const queryParams = {
                            phone_number: $state.phone.value,
                            token: $state.token.value
                          };
                          return axios
                            .post(webhookUrl, { params: queryParams })
                            .then(response => {
                              console.log(
                                "Updated value of $state.answer.value:",
                                $state.apiAnswer
                              );
                              $state.tokenAnswer = String(response.data);
                            })
                            .catch(error => {
                              console.error("Error calling webhook:", error);
                            });
                        })();
                      }
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "customFunction",
                      interactionUuid: "hsLMau7ESxI",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "customFunction",
                interactionUuid: "hsLMau7ESxI",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["runCode"]
            );
          }
          $steps["updatePhoneNumber"] = true
            ? (() => {
                const actionArgs = {
                  variable: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariable",
                      interactionUuid: "PUOjUaDSSSq",
                      componentUuid: "MZ_khWtvGq",
                      argName: "variable"
                    },
                    () => ({
                      objRoot: $state,
                      variablePath: ["phoneNumber"]
                    })
                  ),
                  operation: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariable",
                      interactionUuid: "PUOjUaDSSSq",
                      componentUuid: "MZ_khWtvGq",
                      argName: "operation"
                    },
                    () => 0
                  ),
                  value: __wrapUserFunction(
                    {
                      type: "InteractionArgLoc",
                      actionName: "updateVariable",
                      interactionUuid: "PUOjUaDSSSq",
                      componentUuid: "MZ_khWtvGq",
                      argName: "value"
                    },
                    () => $state.phone.value
                  )
                };
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "PUOjUaDSSSq",
                    componentUuid: "MZ_khWtvGq"
                  },
                  () =>
                    (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      p.set(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["updatePhoneNumber"] === "object" &&
            typeof $steps["updatePhoneNumber"].then === "function"
          ) {
            $steps["updatePhoneNumber"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariable",
                interactionUuid: "PUOjUaDSSSq",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updatePhoneNumber"]
            );
          }
          $steps["updateTokenAnswer"] =
            $state.phone.value !== undefined &&
            $state.phone.value[0] + $state.phone.value[1] === "09" &&
            $state.phone.value.length === 11
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "SQXjWPThKII",
                        componentUuid: "MZ_khWtvGq",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["tokenAnswer"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "SQXjWPThKII",
                        componentUuid: "MZ_khWtvGq",
                        argName: "operation"
                      },
                      () => 0
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "SQXjWPThKII",
                        componentUuid: "MZ_khWtvGq",
                        argName: "value"
                      },
                      () => $state.tokenAnswer
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "SQXjWPThKII",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["updateTokenAnswer"] === "object" &&
            typeof $steps["updateTokenAnswer"].then === "function"
          ) {
            $steps["updateTokenAnswer"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariable",
                interactionUuid: "SQXjWPThKII",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updateTokenAnswer"]
            );
          }
          $steps["goToHomepage"] =
            $state.tokenAnswer === "yes" &&
            $state.phone.value !== undefined &&
            $state.phone.value[0] + $state.phone.value[1] === "09" &&
            $state.phone.value.length === 11
              ? (() => {
                  const actionArgs = {
                    destination: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "navigation",
                        interactionUuid: "7XuFD7fSZWH",
                        componentUuid: "MZ_khWtvGq",
                        argName: "destination"
                      },
                      () => `/test`
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "7XuFD7fSZWH",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ destination }) => {
                        __nextRouter?.push(destination);
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["goToHomepage"] === "object" &&
            typeof $steps["goToHomepage"].then === "function"
          ) {
            $steps["goToHomepage"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "navigation",
                interactionUuid: "7XuFD7fSZWH",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["goToHomepage"]
            );
          }
          $steps["updateSignupStepTwoError"] =
            $state.tokenAnswer === "no" && $state.signupStepTwo
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "iZbBlGT-DWn",
                        componentUuid: "MZ_khWtvGq",
                        argName: "vgroup"
                      },
                      () => "signupStepTwoError"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "iZbBlGT-DWn",
                        componentUuid: "MZ_khWtvGq",
                        argName: "operation"
                      },
                      () => 4
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "iZbBlGT-DWn",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        p.set($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["updateSignupStepTwoError"] === "object" &&
            typeof $steps["updateSignupStepTwoError"].then === "function"
          ) {
            $steps["updateSignupStepTwoError"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "iZbBlGT-DWn",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updateSignupStepTwoError"]
            );
          }
          $steps["updateLoginStepTwoError"] =
            $state.tokenAnswer === "no" && $state.loginStepTwo
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "AgL_LExjl",
                        componentUuid: "MZ_khWtvGq",
                        argName: "vgroup"
                      },
                      () => "loginStepTwoError"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "AgL_LExjl",
                        componentUuid: "MZ_khWtvGq",
                        argName: "operation"
                      },
                      () => 4
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "AgL_LExjl",
                      componentUuid: "MZ_khWtvGq"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        p.set($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
          if (
            typeof $steps["updateLoginStepTwoError"] === "object" &&
            typeof $steps["updateLoginStepTwoError"].then === "function"
          ) {
            $steps["updateLoginStepTwoError"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariant",
                interactionUuid: "AgL_LExjl",
                componentUuid: "MZ_khWtvGq"
              },
              $steps["updateLoginStepTwoError"]
            );
          }
        }}
        onSelectedChange={(...eventArgs) => {
          p.generateStateOnChangeProp($state, ["signupTokenCheck", "selected"])(
            eventArgs[0]
          );
        }}
        selected={p.generateStateValueProp($state, [
          "signupTokenCheck",
          "selected"
        ])}
      >
        {hasVariant($state, "signupStepTwoError", "signupStepTwoError")
          ? "\u0627\u062f\u0627\u0645\u0647"
          : hasVariant($state, "signupStepTwo", "signupStepTwo")
          ? "\u0627\u062f\u0627\u0645\u0647"
          : "\u0648\u0631\u0648\u062f"}
      </SarvButton>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "signupStepTwo2",
    "phone",
    "token",
    "freeBox",
    "timerText",
    "embedHtml",
    "timerCount",
    "timerClick",
    "stepOneButton",
    "signupTokenCheck"
  ],
  img: ["img"],
  signupStepTwo2: ["signupStepTwo2"],
  phone: ["phone"],
  token: ["token"],
  freeBox: ["freeBox", "timerText", "embedHtml", "timerCount", "timerClick"],
  timerText: ["timerText"],
  embedHtml: ["embedHtml"],
  timerCount: ["timerCount"],
  timerClick: ["timerClick"],
  stepOneButton: ["stepOneButton"],
  signupTokenCheck: ["signupTokenCheck"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  signupStepTwo2: "div";
  phone: typeof AntdInput;
  token: typeof AntdInput;
  freeBox: "div";
  timerText: "div";
  embedHtml: typeof Embed;
  timerCount: "div";
  timerClick: "div";
  stepOneButton: typeof SarvButton;
  signupTokenCheck: typeof SarvButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginForm__VariantsArgs;
    args?: PlasmicLoginForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLoginForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLoginForm__ArgProps,
          internalVariantPropNames: PlasmicLoginForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginForm";
  } else {
    func.displayName = `PlasmicLoginForm.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginForm = Object.assign(
  // Top-level PlasmicLoginForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    signupStepTwo2: makeNodeComponent("signupStepTwo2"),
    phone: makeNodeComponent("phone"),
    token: makeNodeComponent("token"),
    freeBox: makeNodeComponent("freeBox"),
    timerText: makeNodeComponent("timerText"),
    embedHtml: makeNodeComponent("embedHtml"),
    timerCount: makeNodeComponent("timerCount"),
    timerClick: makeNodeComponent("timerClick"),
    stepOneButton: makeNodeComponent("stepOneButton"),
    signupTokenCheck: makeNodeComponent("signupTokenCheck"),

    // Metadata about props expected for PlasmicLoginForm
    internalVariantProps: PlasmicLoginForm__VariantProps,
    internalArgProps: PlasmicLoginForm__ArgProps
  }
);

export default PlasmicLoginForm;
/* prettier-ignore-end */
