// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aUZyoBv2znBVirsF7auAUJ
// Component: qjRxKdhdUqoi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: hdkwfO6DN97t/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 7UkPT0uRfk9/codeComponent
import ProjectCard from "../../ProjectCard"; // plasmic-import: z8gKJTdyaC-H/component
import SarvButton from "../../SarvButton"; // plasmic-import: oskxfFF4bAz/component
import Footer from "../../Footer"; // plasmic-import: wozDst_MhUug/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_landing_page_starter_css from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qLp2o69PMLTDkVR2ydizGB/projectcss
import projectcss from "./plasmic_sarv.module.css"; // plasmic-import: aUZyoBv2znBVirsF7auAUJ/projectcss
import sty from "./PlasmicHomePage2.module.css"; // plasmic-import: qjRxKdhdUqoi/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: XJpVQNdzD6f/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: sQ0yZCF2eby/icon

createPlasmicElementProxy;

export type PlasmicHomePage2__VariantMembers = {};
export type PlasmicHomePage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomePage2__VariantsArgs;
export const PlasmicHomePage2__VariantProps = new Array<VariantPropType>();

export type PlasmicHomePage2__ArgsType = {
  componentData?: any;
};
type ArgPropType = keyof PlasmicHomePage2__ArgsType;
export const PlasmicHomePage2__ArgProps = new Array<ArgPropType>(
  "componentData"
);

export type PlasmicHomePage2__OverridesType = {
  root?: p.Flex<"div">;
  sectionOne?: p.Flex<"section">;
  header?: p.Flex<typeof Header>;
  pageOne?: p.Flex<"div">;
  imgPageOne?: p.Flex<"section">;
  sectionTwo?: p.Flex<"section">;
  sectionTwo3?: p.Flex<"section">;
  sectionThree?: p.Flex<"section">;
  dataFetcher?: p.Flex<typeof Fetcher>;
  projectCard?: p.Flex<typeof ProjectCard>;
  sectionFour?: p.Flex<"section">;
  sarvButton?: p.Flex<typeof SarvButton>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomePage2Props {
  componentData?: any;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomePage2__RenderFunc(props: {
  variants: PlasmicHomePage2__VariantsArgs;
  args: PlasmicHomePage2__ArgsType;
  overrides: PlasmicHomePage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "projectCard[].thumbnail",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].investmnetType",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].locationName",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].builder",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].startDuration",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].endDuration",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].profitPercent",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].minMoney",
        type: "private",
        variableType: "number"
      },
      {
        path: "sarvButton.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "projectCard[].projectId",
        type: "private",
        variableType: "text"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_landing_page_starter_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"sectionOne"}
        data-plasmic-override={overrides.sectionOne}
        className={classNames(projectcss.all, sty.sectionOne)}
      >
        <Header
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames("__wab_instance", sty.header)}
        />

        <div
          data-plasmic-name={"pageOne"}
          data-plasmic-override={overrides.pageOne}
          className={classNames(projectcss.all, sty.pageOne)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__kKlq1)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sMvOj)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__faSV
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u0628\u0627 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062f\u0631 \u067e\u0631\u0648\u0698\u0647\u200c\u0647\u0627\u06cc \u0633\u0627\u062e\u062a\u0645\u0627\u0646\u06cc "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#00A693" }}
                  >
                    {
                      "\u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u062f\u0644\u0627\u0631 \u0633\u0648\u062f"
                    }
                  </span>
                  <React.Fragment>
                    {" \u06a9\u0646\u06cc\u062f."}
                  </React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zLsgP
                )}
              >
                {
                  "\u0645\u0627\u0646\u0639\u06cc \u0628\u0631\u0627\u06cc \u0633\u0631\u0645\u0627\u06cc\u0647\u200c\u06af\u0630\u0627\u0631\u06cc \u062f\u0631 \u0645\u0633\u06a9\u0646 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f\u061b \u0628\u0627 \u0647\u0631 \u0645\u0642\u062f\u0627\u0631 \u0633\u0631\u0645\u0627\u06cc\u0647 \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u062f \u0648 \u0642\u062f\u0645 \u0628\u0647 \u0642\u062f\u0645 \u062f\u0627\u0631\u0627\u06cc\u06cc \u062e\u0648\u062f \u0631\u0627 \u0628\u06cc\u0634\u062a\u0631 \u06a9\u0646\u06cc\u062f..."
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__yIoVr)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rL221
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0628\u0631\u0627\u06cc \u062f\u06cc\u062f\u0646 \u067e\u0631\u0648\u0698\u0647 \u0647\u0627 "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#00A693" }}
                    >
                      {"\u06a9\u0644\u06cc\u06a9"}
                    </span>
                    <React.Fragment>
                      {" \u06a9\u0646\u06cc\u062f"}
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </p.Stack>
            <section
              data-plasmic-name={"imgPageOne"}
              data-plasmic-override={overrides.imgPageOne}
              className={classNames(projectcss.all, sty.imgPageOne)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__nv3ZP)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/sarv/images/pexelsJovydasPinkevicius24620Jpg.jpg",
                  fullWidth: 1280,
                  fullHeight: 1920,
                  aspectRatio: undefined
                }}
              />
            </section>
          </div>
        </div>
      </section>
      <section
        data-plasmic-name={"sectionTwo"}
        data-plasmic-override={overrides.sectionTwo}
        className={classNames(projectcss.all, sty.sectionTwo)}
      >
        <section className={classNames(projectcss.all, sty.section__btpXb)}>
          <div className={classNames(projectcss.all, sty.freeBox__cZqae)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pVRh
              )}
            >
              {
                "\u0686\u0631\u0627 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062f\u0631 \u067e\u0631\u0648\u0698\u0647 \u0647\u0627\u06cc \u0633\u0627\u062e\u062a\u0645\u0627\u0646\u06cc\u061f"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___05NYw)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ablXv
                )}
              >
                {
                  "\u0627\u06af\u0631 \u0633\u0627\u0644 \u06f1\u06f3\u06f8\u06f0\u060c \u0645\u0639\u0627\u062f\u0644"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ktTc
                )}
              >
                {"\u06cc\u06a9"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6JCuy
                )}
              >
                {
                  "\u0645\u062a\u0631 \u0622\u067e\u0627\u0631\u062a\u0645\u0627\u0646 \u062f\u0631 \u062d\u0648\u0632\u0647\u200c\u0647\u0627\u06cc \u0645\u062e\u062a\u0644\u0641 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u06a9\u0631\u062f\u0647 \u0628\u0648\u062f\u06cc\u062f \u0627\u0645\u0631\u0648\u0632 \u0686\u0642\u062f\u0631 \u067e\u0648\u0644 \u062f\u0627\u0634\u062a\u06cc\u062f\u061f"
                }
              </div>
            </div>
          </div>
        </section>
        <section className={classNames(projectcss.all, sty.section__nMsK)}>
          <div className={classNames(projectcss.all, sty.freeBox__kumcb)}>
            <section
              className={classNames(projectcss.all, sty.section___785Zt)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___7IgYk)}
                displayHeight={"95%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"75%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/sarv/images/pexelsRobinSchreiner2261166Jpg.jpg",
                  fullWidth: 1280,
                  fullHeight: 1706,
                  aspectRatio: undefined
                }}
              />
            </section>
            <section className={classNames(projectcss.all, sty.section__lPbi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7NzQz
                )}
              >
                {
                  "\u062a\u0627 \u0627\u06cc\u0646\u062c\u0627\u06cc \u06a9\u0627\u0631..."
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fIe45)}>
                <section
                  className={classNames(projectcss.all, sty.section__oD9Hz)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qFno
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {
                          "\u0645\u062a\u0631\u0627\u0698 \u067e\u0631\u0648\u0698\u0647"
                        }
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#00A693" }}
                      >
                        {
                          "\u06f1\u06f3 \u0647\u0632\u0627\u0631 \u0645\u062a\u0631"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                </section>
                <section
                  className={classNames(projectcss.all, sty.section__nreO0)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t86Fk
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {
                          "\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u0647"
                        }
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#00A693" }}
                      >
                        {
                          "\u06f1\u06f2\u06f0\u06f2 \u0645\u0639\u0627\u0645\u0644\u0647"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                </section>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__gOYr)}>
                <section
                  className={classNames(projectcss.all, sty.section___7HZe)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gp1NR
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {
                          "\u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062a\u0627 \u0628\u0647 \u0627\u0645\u0631\u0648\u0632"
                        }
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#00A693" }}
                      >
                        {
                          "\u06f2\u06f6\u06f7 \u0645\u06cc\u0644\u06cc\u0627\u0631\u062f \u062a\u0648\u0645\u0627\u0646"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                </section>
                <section
                  className={classNames(projectcss.all, sty.section___44K)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__axWcd
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {
                          "\u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631"
                        }
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#00A693" }}
                      >
                        {"\u06f7\u06f3\u06f5 \u0646\u0641\u0631"}
                      </span>
                    </React.Fragment>
                  </div>
                </section>
              </div>
            </section>
          </div>
        </section>
      </section>
      <section
        data-plasmic-name={"sectionTwo3"}
        data-plasmic-override={overrides.sectionTwo3}
        className={classNames(projectcss.all, sty.sectionTwo3)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___3TH)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fnu8N
            )}
          >
            {
              "\u062a\u0627 \u0627\u06cc\u0646\u062c\u0627\u06cc \u06a9\u0627\u0631 ..."
            }
          </div>
        </div>
        <section className={classNames(projectcss.all, sty.section__a1BiI)}>
          <section className={classNames(projectcss.all, sty.section__gr0Lr)}>
            <div className={classNames(projectcss.all, sty.freeBox__siRcv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Aa8
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062a\u0627 \u0628\u0647 \u0627\u0645\u0631\u0648\u0632\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#1A3040" }}
                  >
                    {
                      "\u06f2\u06f6\u06f7 \u0645\u06cc\u0644\u06cc\u0627\u0631\u062f \u062a\u0648\u0645\u0627\u0646"
                    }
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dmo2P
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#1A3040" }}
                  >
                    {"\u06f7\u06f3\u06f5 \u0646\u0641\u0631"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7AQej
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u0645\u062a\u0631\u0627\u0698 \u067e\u0631\u0648\u0698\u0647\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#1A3040" }}
                  >
                    {"\u06f1\u06f3 \u0647\u0632\u0627\u0631 \u0645\u062a\u0631"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__g8Xu2
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u0647\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#1A3040" }}
                  >
                    {
                      "\u06f1\u06f2\u06f0\u06f2 \u0645\u0639\u0627\u0645\u0644\u0647"
                    }
                  </span>
                </React.Fragment>
              </div>
            </div>
          </section>
        </section>
      </section>
      <section
        data-plasmic-name={"sectionThree"}
        data-plasmic-override={overrides.sectionThree}
        className={classNames(projectcss.all, sty.sectionThree)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___0HBE)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xRJt2
            )}
          >
            {
              "\u067e\u0631\u0648\u0698\u0647 \u0647\u0627\u06cc \u062f\u0631 \u062d\u0627\u0644 \u0633\u0631\u0645\u0627\u06cc\u0647 \u067e\u0630\u06cc\u0631\u06cc"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__rkc84)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tmKXt
              )}
            >
              {
                "\u067e\u0631\u0648\u0698\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
              }
            </div>
          </div>
        </div>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yk5Ab)}
        >
          {(
            (() => {
              try {
                return $props.componentData.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })() ?? []
          ).map((currentItem, currentIndex) => (
            <Fetcher
              data-plasmic-name={"dataFetcher"}
              data-plasmic-override={overrides.dataFetcher}
              className={classNames("__wab_instance", sty.dataFetcher)}
              dataOp={{
                sourceId: "g2uxxaev1HFNY4HHP1PTDS",
                opId: "36228745-bd76-47cd-800a-5a079de518a7",
                userArgs: {},
                cacheKey: "plasmic.$.4def8uA1OnD_.$.",
                invalidatedKeys: null,
                roleId: null
              }}
              key={currentIndex}
              queries={{}}
            >
              {($queries: any) =>
                (() => {
                  const child$Props = {
                    builder: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "builder"
                    ]),
                    className: classNames("__wab_instance", sty.projectCard),
                    endDuration: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "endDuration"
                    ]),
                    investmnetType: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "investmnetType"
                    ]),
                    locationName: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "locationName"
                    ]),
                    minMoney: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "minMoney"
                    ]),
                    onBuilderChange: p.generateStateOnChangeProp($state, [
                      "projectCard",
                      currentIndex,
                      "builder"
                    ]),
                    onEndDurationChange: p.generateStateOnChangeProp($state, [
                      "projectCard",
                      currentIndex,
                      "endDuration"
                    ]),
                    onInvestmnetTypeChange: p.generateStateOnChangeProp(
                      $state,
                      ["projectCard", currentIndex, "investmnetType"]
                    ),
                    onLocationNameChange: p.generateStateOnChangeProp($state, [
                      "projectCard",
                      currentIndex,
                      "locationName"
                    ]),
                    onMinMoneyChange: p.generateStateOnChangeProp($state, [
                      "projectCard",
                      currentIndex,
                      "minMoney"
                    ]),
                    onProfitPercentChange: p.generateStateOnChangeProp($state, [
                      "projectCard",
                      currentIndex,
                      "profitPercent"
                    ]),
                    onProjectIdChange: p.generateStateOnChangeProp($state, [
                      "projectCard",
                      currentIndex,
                      "projectId"
                    ]),
                    onStartDurationChange: p.generateStateOnChangeProp($state, [
                      "projectCard",
                      currentIndex,
                      "startDuration"
                    ]),
                    onThumbnailChange: p.generateStateOnChangeProp($state, [
                      "projectCard",
                      currentIndex,
                      "thumbnail"
                    ]),
                    onTitleChange: p.generateStateOnChangeProp($state, [
                      "projectCard",
                      currentIndex,
                      "title"
                    ]),
                    profitPercent: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "profitPercent"
                    ]),
                    projectId: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "projectId"
                    ]),
                    startDuration: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "startDuration"
                    ]),
                    thumbnail: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "thumbnail"
                    ]),
                    title: p.generateStateValueProp($state, [
                      "projectCard",
                      currentIndex,
                      "title"
                    ])
                  };

                  p.initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "projectCard[].thumbnail",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.img1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "projectCard[].title",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "projectCard[].investmnetType",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.status;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "projectCard[].locationName",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem["location-name"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "projectCard[].builder",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.builder;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "projectCard[].startDuration",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem["month pass"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "projectCard[].endDuration",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem["duration to end"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "projectCard[].profitPercent",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem["profit till now"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "projectCard[].minMoney",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem["starting price"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      },
                      {
                        name: "projectCard[].projectId",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    [currentIndex]
                  );
                  return (
                    <ProjectCard
                      data-plasmic-name={"projectCard"}
                      data-plasmic-override={overrides.projectCard}
                      {...child$Props}
                    />
                  );
                })()
              }
            </Fetcher>
          ))}
        </p.Stack>
      </section>
      <section
        data-plasmic-name={"sectionFour"}
        data-plasmic-override={overrides.sectionFour}
        className={classNames(projectcss.all, sty.sectionFour)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jdkIp
          )}
        >
          {
            "\u0647\u0645\u06cc\u0646 \u062d\u0627\u0644\u0627 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062e\u0648\u062f \u0631\u0627 \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u062f"
          }
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7JrV4
          )}
        >
          {
            "\u0628\u0627 \u0633\u0627\u062e\u062a\u0646 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0647 \u0633\u0631\u0639\u062a \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062e\u0648\u062f \u0631\u0627 \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u062f"
          }
        </div>
        <SarvButton
          data-plasmic-name={"sarvButton"}
          data-plasmic-override={overrides.sarvButton}
          className={classNames("__wab_instance", sty.sarvButton)}
          color={"softPersianGreen"}
          onClick={async event => {
            const $steps = {};
            $steps["updateProjectCardThumbnail"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "EwsHEL_FZfz7",
                        componentUuid: "qjRxKdhdUqoi",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["projectCard[]", "thumbnail"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "EwsHEL_FZfz7",
                        componentUuid: "qjRxKdhdUqoi",
                        argName: "operation"
                      },
                      () => 0
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "EwsHEL_FZfz7",
                      componentUuid: "qjRxKdhdUqoi"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateProjectCardThumbnail"] === "object" &&
              typeof $steps["updateProjectCardThumbnail"].then === "function"
            ) {
              $steps["updateProjectCardThumbnail"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "EwsHEL_FZfz7",
                  componentUuid: "qjRxKdhdUqoi"
                },
                $steps["updateProjectCardThumbnail"]
              );
            }
          }}
          onSelectedChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ["sarvButton", "selected"])(
              eventArgs[0]
            );
          }}
          selected={p.generateStateValueProp($state, [
            "sarvButton",
            "selected"
          ])}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__g4Hix
            )}
          >
            {"\u0648\u0631\u0648\u062f | \u062b\u0628\u062a \u0646\u0627\u0645"}
          </div>
        </SarvButton>
      </section>
      <Footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames("__wab_instance", sty.footer)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionOne",
    "header",
    "pageOne",
    "imgPageOne",
    "sectionTwo",
    "sectionTwo3",
    "sectionThree",
    "dataFetcher",
    "projectCard",
    "sectionFour",
    "sarvButton",
    "footer"
  ],
  sectionOne: ["sectionOne", "header", "pageOne", "imgPageOne"],
  header: ["header"],
  pageOne: ["pageOne", "imgPageOne"],
  imgPageOne: ["imgPageOne"],
  sectionTwo: ["sectionTwo"],
  sectionTwo3: ["sectionTwo3"],
  sectionThree: ["sectionThree", "dataFetcher", "projectCard"],
  dataFetcher: ["dataFetcher", "projectCard"],
  projectCard: ["projectCard"],
  sectionFour: ["sectionFour", "sarvButton"],
  sarvButton: ["sarvButton"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionOne: "section";
  header: typeof Header;
  pageOne: "div";
  imgPageOne: "section";
  sectionTwo: "section";
  sectionTwo3: "section";
  sectionThree: "section";
  dataFetcher: typeof Fetcher;
  projectCard: typeof ProjectCard;
  sectionFour: "section";
  sarvButton: typeof SarvButton;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomePage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomePage2__VariantsArgs;
    args?: PlasmicHomePage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomePage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomePage2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomePage2__ArgProps,
          internalVariantPropNames: PlasmicHomePage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomePage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomePage2";
  } else {
    func.displayName = `PlasmicHomePage2.${nodeName}`;
  }
  return func;
}

export const PlasmicHomePage2 = Object.assign(
  // Top-level PlasmicHomePage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionOne: makeNodeComponent("sectionOne"),
    header: makeNodeComponent("header"),
    pageOne: makeNodeComponent("pageOne"),
    imgPageOne: makeNodeComponent("imgPageOne"),
    sectionTwo: makeNodeComponent("sectionTwo"),
    sectionTwo3: makeNodeComponent("sectionTwo3"),
    sectionThree: makeNodeComponent("sectionThree"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    projectCard: makeNodeComponent("projectCard"),
    sectionFour: makeNodeComponent("sectionFour"),
    sarvButton: makeNodeComponent("sarvButton"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomePage2
    internalVariantProps: PlasmicHomePage2__VariantProps,
    internalArgProps: PlasmicHomePage2__ArgProps
  }
);

export default PlasmicHomePage2;
/* prettier-ignore-end */
